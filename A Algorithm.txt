Problem Statement: 
Implement A star Algorithm for any game search problem. 

Objective: 
To understand concept A star Algorithm for search problem. 

Outcome: 
To implement a program for creating A star Algorithm for search problem. 

Theory Concepts : 
A star search is the most commonly known form of best-first search. It uses heuristic function h(n), and 
cost to reach the node n from the start state g(n). It has combined features of UCS and greedy best-first 
search, by which it solve the problem efficiently. A star search algorithm finds the shortest path through 
the search space using the heuristic function. This search algorithm expands less search tree and provides 
optimal result faster. A star algorithm is similar to UCS except that it uses g(n)+h(n) instead of g(n). 
In A star search algorithm, we use search heuristic as well as the cost to reach the node. Hence we can 
combine both costs as following, and this sum is called as a fitness number. 
f(n)=g(n)+h(n)

Algorithm of A star search: 
Step1: Place the starting node in the OPEN list. 
Step 2: Check if the OPEN list is empty or not, if the list is empty then return failure and stops. 
Step 3: Select the node from the OPEN list which has the smallest value of evaluation function (g+h), if 
node n is goal node then return success and stop, otherwise. 
Step 4: Expand node n and generate all of its successors, and put n into the closed list. For each successor 
n', check whether n' is already in the OPEN or CLOSED list, if not then compute evaluation function for 
n' and place into Open list. 
Step 5: Else if node n' is already in OPEN and CLOSED, then it should be attached to the back pointer 
which reflects the lowest g(n') value. 
Step 6: Return to Step 2. 


Advantages: 
1. A star search algorithm is the best algorithm than other search algorithms. 
2. A star search algorithm is optimal and complete. 
3. This algorithm can solve very complex problems. 

Disadvantages: 
1. It does not always produce the shortest path as it mostly based on heuristics and approximation. 
2. A star search algorithm has some complexity issues. 
3. The main drawback of A star is memory requirement as it keeps all generated nodes in the memory, so 
it is not practical for various large-scale problems. 

Output: 
(Execute the program and attach the printout here) 

Conclusion: 
Hence we have implemented A star Algorithm for any game search problem.








dict_hn={'Arad':42,'Bucharest':0,'Craiova':60,'Drobeta':242,'Eforie':161,
'Fagaras':176,'Giurgiu':77,'Hirsova':151,'Iasi':206,'Lugoj':254,
'Mehadia':241,'Neamt':304,'Oradea':180,'Pitesti':100,'Rimnicu':193,
'Sibiu':150,'Timisoara':329,'Urziceni':80,'Vaslui':199,'Zerind':314}

dict_gn=dict(
Arad=dict(Zerind=70,Timisoara=112,Sibiu=130),
Bucharest=dict(Urziceni=85,Giurgiu=90,Pitesti=101,Fagaras=211),
Craiova=dict(Drobeta=120,Pitesti=138,Rimnicu=146),
Drobeta=dict(Mehadia=70,Craiova=125),
Eforie=dict(Hirsova=66),
Fagaras=dict(Sibiu=99,Bucharest=113),
Giurgiu=dict(Bucharest=90),Hirsova=dict(Eforie=86,Urziceni=98),
Iasi=dict(Neamt=87,Vaslui=92),
Lugoj=dict(Mehadia=72,Timisoara=100),
Mehadia=dict(Lugoj=78,Drobeta=75),
Neamt=dict(Iasi=87),
Oradea=dict(Zerind=71,Sibiu=141),
Pitesti=dict(Rimnicu=97,Bucharest=101,Craiova=138),
Rimnicu=dict(Sibiu=80,Pitesti=97,Craiova=146),
Sibiu=dict(Rimnicu=80,Fagaras=99,Arad=82,Oradea=141),
Timisoara=dict(Lugoj=111,Arad=118),
Urziceni=dict(Bucharest=85,Hirsova=98,Vaslui=132),
Vaslui=dict(Iasi=92,Urziceni=132),
Zerind=dict(Oradea=71,Arad=75)
)
import queue as Q
#from RMP import dict_gn
#from RMP import dict_hn
start='Arad'
goal='Bucharest'
result=''
def get_fn(citystr):
    cities=citystr.split(" , ")
    hn=gn=0
    for ctr in range(0, len(cities)-1):
        gn=gn+dict_gn[cities[ctr]][cities[ctr+1]]
    hn=dict_hn[cities[len(cities)-1]]
    return(hn+gn)

def expand(cityq):
    global result
    tot, citystr, thiscity=cityq.get()
    if thiscity==goal:
        result=citystr+" : : "+str(tot)
        return
    for cty in dict_gn[thiscity]:
        cityq.put((get_fn(citystr+" , "+cty), citystr+" , "+cty, cty))
    expand(cityq)

def main():
    cityq=Q.PriorityQueue()
    thiscity=start
    cityq.put((get_fn(start),start,thiscity))
    expand(cityq)
    print("The A* path with the total is: ")
    print(result)
main()
