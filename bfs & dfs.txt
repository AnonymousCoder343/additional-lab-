Problem Statement: 
Implement depth first search algorithm and Breadth First Search algorithm, Use an undirected graph and 
develop a recursive algorithm for searching all the vertices of a graph or tree data structure. 

Objective: 
To understand the basic concepts of search algorithm techniques. 

Outcome: 
To implement the basic concept depth first search algorithm and Breadth First Search algorithm. 

Theory Concepts: 

1. Breadth First Search (BFS): 
BFS is one of the traversing algorithms used in graphs. This algorithm is implemented using a queue data 
structure. In this algorithm, the main focus is on the vertices of the graph. Select a starting node or vertex 
at first, mark the starting node or vertex as visited and store it in a queue. Then visit the vertices or nodes 
which are adjacent to the starting node, mark them as visited and store these vertices or nodes in a queue. 
Repeat this process until all the nodes or vertices are completely visited 

Advantages of BFS 
1. It can be useful in order to find whether the graph has connected components or not. 
2. It always finds or returns the shortest path if there is more than one path between two vertices. 

Disadvantages of BFS 
1. The execution time of this algorithm is very slow because the time complexity of this algorithm is 
exponential. 
2. This algorithm is not useful when large graphs are used. 

Explanation: 
1. Create a graph. 
2. Initialize a starting node. 
3. Send the graph and initial node as parameters to the bfs function. 
4. Mark the initial node as visited and push it into the queue. 
5. Explore the initial node and add its neighbours to the queue and remove the initial node from the queue. 
6. Check if the neighbours node of a neighbouring node is already visited. 
7. if not, visit the neighbouring node neighbours and mark them as visited. 
8. Repeat this process until all the nodes in a graph are visited and the queue become empty. 


2. Depth First Search (DFS) 
Depth first Search or Depth first traversal is a recursive algorithm for searching all the vertices of a graph 
or tree data structure. Traversal means visiting all the nodes of a graph. Depth First Search Algorithm A 
standard DFS implementation puts each vertex of the graph into one of two categories: 
1. Visited 
2. Not Visited 

The purpose of the algorithm is to mark each vertex as visited while avoiding cycles. The DFS algorithm 
works as follows: 
1. Start by putting any one of the graph's vertices on top of a stack. 
2. Take the top item of the stack and add it to the visited list. 
3. Create a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the top of the 
stack. 
4. Keep repeating steps 2 and 3 until the stack is empty. 
Depth First Search Example 
Let's see how the Depth First Search algorithm works with an example. We use an undirected graph with 
5 vertices. 

The time complexity of the DFS algorithm is represented in the form of O(V + E), where V is the number 
of nodes and E is the number of edges. The space complexity of the algorithm is O(V). 

Application of DFS Algorithm: 
1. for finding the path 
2. To test if the graph is bipartite 
3. for finding the strongly connected components of a graph 
4. for detecting cycles in a graph 

Output: 
(Execute the program and attach the printout here) 

Conclusion: 
 Hence we have implemented depth first search algorithm and Breadth First Search algorithm, Use an 
undirected graph and develop a recursive algorithm for searching all the vertices of a graph or tree data 
structure.



1.Depth Frist Search (DFS)

Code:
graph = {
  'A' : ['B','C'],
  'B' : ['D', 'E'],
  'C' : ['F','G'],
  'D' : ['H'],
  'H' : [],
  'E' : [],
  'F' : [],
  'G' : []
}

visited = set()     # Set to keep track of visited nodes of graph.
def dfs(visited, graph, node):      #function for dfs
    if node not in visited:
        print (node)
        visited.add(node)
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)
# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, 'A')








2.Breadth Frist Search (BFS)

Code:
graph = {
  'A' : ['B','C'],
  'B' : ['D', 'E'],
  'C' : ['F'],
  'D' : [],
  'E' : [],
  'F' : ['G','H'],
  'G' : [],
  'H' : []
}
visited = []       # List for visited nodes.
queue = []      #Initialize a queue

def bfs(visited, graph, node):      #function for BFS
  visited.append(node)
  queue.append(node)
  while queue:           # Creating loop to visit each node
    m = queue.pop(0)
    print (m, end = " ")
    for neighbour in graph[m]:
      if neighbour not in visited:
        visited.append(neighbour)
        queue.append(neighbour)
# Driver Code
print("Following is the Breadth-First Search")
bfs(visited, graph, 'A')     
